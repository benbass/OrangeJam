// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'domain/entities/track_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 1320934654704294464),
      name: 'TrackEntity',
      lastPropertyId: const obx_int.IdUid(12, 1962230532206375271),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6529432541966737105),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7730311752469273668),
            name: 'filePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4750768727862227457),
            name: 'trackName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6780816399100685027),
            name: 'trackArtistNames',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5256319709535534240),
            name: 'albumName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6546823176976486478),
            name: 'trackNumber',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5729670227231384682),
            name: 'albumLength',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4469052796290122789),
            name: 'year',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5181864297138238129),
            name: 'genre',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6037754705639840181),
            name: 'trackDuration',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1919565905952254115),
            name: 'albumArt',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 1962230532206375271),
            name: 'albumArtist',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(1, 1320934654704294464),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    TrackEntity: obx_int.EntityDefinition<TrackEntity>(
        model: _entities[0],
        toOneRelations: (TrackEntity object) => [],
        toManyRelations: (TrackEntity object) => {},
        getId: (TrackEntity object) => object.id,
        setId: (TrackEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TrackEntity object, fb.Builder fbb) {
          final filePathOffset = fbb.writeString(object.filePath);
          final trackNameOffset = object.trackName == null
              ? null
              : fbb.writeString(object.trackName!);
          final trackArtistNamesOffset = object.trackArtistNames == null
              ? null
              : fbb.writeString(object.trackArtistNames!);
          final albumNameOffset = object.albumName == null
              ? null
              : fbb.writeString(object.albumName!);
          final genreOffset =
              object.genre == null ? null : fbb.writeString(object.genre!);
          final albumArtOffset = object.albumArt == null
              ? null
              : fbb.writeListInt8(object.albumArt!);
          final albumArtistOffset = object.albumArtist == null
              ? null
              : fbb.writeString(object.albumArtist!);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, filePathOffset);
          fbb.addOffset(2, trackNameOffset);
          fbb.addOffset(3, trackArtistNamesOffset);
          fbb.addOffset(4, albumNameOffset);
          fbb.addInt64(5, object.trackNumber);
          fbb.addInt64(6, object.albumLength);
          fbb.addInt64(7, object.year);
          fbb.addOffset(8, genreOffset);
          fbb.addFloat64(9, object.trackDuration);
          fbb.addOffset(10, albumArtOffset);
          fbb.addOffset(11, albumArtistOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final filePathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final trackNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final trackArtistNamesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final albumNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final trackNumberParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final albumLengthParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final yearParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final genreParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final trackDurationParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 22);
          final albumArtParam = const fb.Uint8ListReader(lazy: false)
              .vTableGetNullable(buffer, rootOffset, 24) as Uint8List?;
          final albumArtistParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final object = TrackEntity(
              filePath: filePathParam,
              trackName: trackNameParam,
              trackArtistNames: trackArtistNamesParam,
              albumName: albumNameParam,
              trackNumber: trackNumberParam,
              albumLength: albumLengthParam,
              year: yearParam,
              genre: genreParam,
              trackDuration: trackDurationParam,
              albumArt: albumArtParam,
              albumArtist: albumArtistParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [TrackEntity] entity fields to define ObjectBox queries.
class TrackEntity_ {
  /// See [TrackEntity.id].
  static final id =
      obx.QueryIntegerProperty<TrackEntity>(_entities[0].properties[0]);

  /// See [TrackEntity.filePath].
  static final filePath =
      obx.QueryStringProperty<TrackEntity>(_entities[0].properties[1]);

  /// See [TrackEntity.trackName].
  static final trackName =
      obx.QueryStringProperty<TrackEntity>(_entities[0].properties[2]);

  /// See [TrackEntity.trackArtistNames].
  static final trackArtistNames =
      obx.QueryStringProperty<TrackEntity>(_entities[0].properties[3]);

  /// See [TrackEntity.albumName].
  static final albumName =
      obx.QueryStringProperty<TrackEntity>(_entities[0].properties[4]);

  /// See [TrackEntity.trackNumber].
  static final trackNumber =
      obx.QueryIntegerProperty<TrackEntity>(_entities[0].properties[5]);

  /// See [TrackEntity.albumLength].
  static final albumLength =
      obx.QueryIntegerProperty<TrackEntity>(_entities[0].properties[6]);

  /// See [TrackEntity.year].
  static final year =
      obx.QueryIntegerProperty<TrackEntity>(_entities[0].properties[7]);

  /// See [TrackEntity.genre].
  static final genre =
      obx.QueryStringProperty<TrackEntity>(_entities[0].properties[8]);

  /// See [TrackEntity.trackDuration].
  static final trackDuration =
      obx.QueryDoubleProperty<TrackEntity>(_entities[0].properties[9]);

  /// See [TrackEntity.albumArt].
  static final albumArt =
      obx.QueryByteVectorProperty<TrackEntity>(_entities[0].properties[10]);

  /// See [TrackEntity.albumArtist].
  static final albumArtist =
      obx.QueryStringProperty<TrackEntity>(_entities[0].properties[11]);
}
